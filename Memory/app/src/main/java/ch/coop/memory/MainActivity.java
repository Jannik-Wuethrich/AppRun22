package ch.coop.memory;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.os.Bundle;
import android.util.Base64;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.Toast;

import androidx.activity.result.ActivityResultLauncher;
import androidx.appcompat.app.AppCompatActivity;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.gson.Gson;
import com.google.zxing.client.android.Intents;
import com.journeyapps.barcodescanner.ScanContract;
import com.journeyapps.barcodescanner.ScanOptions;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

public class MainActivity extends AppCompatActivity implements SensorEventListener {
    private final Bitmap PLACEHOLDER_IMAGE = StringToBitMap("");

    private String lastClickedTileId = "";

    private List<Word> words = new ArrayList<>();
    private List<Pair> pairs = new ArrayList<>();
    private CardView currentCardView;
    private String filename = "data123.json";
    private String filenameForWord = "word.json";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_main);

        // When clicking the PLUS-Button launch the normal QR Scanner
        findViewById(R.id.fab).setOnClickListener(view -> launchScanner(qrLauncher));

        try (FileInputStream fin123 = openFileInput(filename)) {
            Gson gson = new Gson();
            JSONModal abc = gson.fromJson(readFileInputStream(fin123), JSONModal.class);
            Toast.makeText(getBaseContext(), "file read", Toast.LENGTH_SHORT).show();

            for (Word word : abc.getResults()) {
                word.setBitmap(StringToBitMap(word.getBitmapString()));
                words.add(word);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        updateRec();
    }


    @Override
    public void onSensorChanged(SensorEvent sensorEvent) {

    }

    @Override
    public void onAccuracyChanged(Sensor sensor, int i) {

    }

    private final ActivityResultLauncher<ScanOptions> qrLauncher = registerForActivityResult(new ScanContract(), result -> {
        if (result.getContents() == null) {
            Intent originalIntent = result.getOriginalIntent();
            if (originalIntent == null) {
                Toast.makeText(this, "Cancelled", Toast.LENGTH_LONG).show();
            } else if (originalIntent.hasExtra(Intents.Scan.MISSING_CAMERA_PERMISSION)) {
                Toast.makeText(this, "No Permissions", Toast.LENGTH_LONG);
            }
        } else {
            String randomPairIdentifier = String.valueOf(UUID.randomUUID());

            String scannedWord = result.getContents();
            String path = result.getBarcodeImagePath();
            File file = new File(path);
            Bitmap bitmap = BitmapFactory.decodeFile(file.getAbsolutePath());
            Toast.makeText(this, "Scanned: " + scannedWord, Toast.LENGTH_LONG).show();

            Word word1 = new Word(scannedWord, bitmap, randomPairIdentifier + "_1");
            Word word2 = new Word("", PLACEHOLDER_IMAGE, randomPairIdentifier + "_2");

            words.add(word1);
            words.add(word2);

            writeDataToFile();
            updateRec();
        }
    });

    private final ActivityResultLauncher<ScanOptions> qrLauncherToUpdate = registerForActivityResult(new ScanContract(), result -> {
        if (result.getContents() != null) {
            String scannedWord = result.getContents();
            String path = result.getBarcodeImagePath();
            File file = new File(path);
            Bitmap bitmap = BitmapFactory.decodeFile(file.getAbsolutePath());

            Optional<Word> optionalWordToUpdate = words.stream()
                    .filter(word -> lastClickedTileId.equals(word.getId()))
                    .findAny();

            if (optionalWordToUpdate.isPresent()) {
                Word wordToUpdate = optionalWordToUpdate.get();
                wordToUpdate.setWord(scannedWord);
                wordToUpdate.setBitmap(bitmap);
                wordToUpdate.setBitmapString(bitMapToString(bitmap));
            }

            writeDataToFile();
            updateRec();
        } else {
            Intent originalIntent = result.getOriginalIntent();

            if (originalIntent == null) {
                Toast.makeText(this, "Cancelled", Toast.LENGTH_LONG).show();
            } else if (originalIntent.hasExtra(Intents.Scan.MISSING_CAMERA_PERMISSION)) {
                Toast.makeText(this, "No Permissions", Toast.LENGTH_LONG);
            }
        }
    });

    public void launchScanner(ActivityResultLauncher<ScanOptions> qrLauncher) {
        ScanOptions scanOptions = new ScanOptions();
        scanOptions.setCaptureActivity(MyCaptureActivity.class);
        scanOptions.setDesiredBarcodeFormats(ScanOptions.QR_CODE);
        scanOptions.setOrientationLocked(false);
        scanOptions.addExtra(Intents.Scan.BARCODE_IMAGE_ENABLED, true);
        scanOptions.setBeepEnabled(false);
        scanOptions.setPrompt("Scan a QR code");
        qrLauncher.launch(scanOptions);
    }

    private static final int SCAN_QR_CODE_REQUEST_CODE = 0;

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.menu_main, menu);
        MenuItem menuItem = menu.add("Log");
        menuItem.setOnMenuItemClickListener(item -> {
            if (item.getItemId() == R.id.message_button) {

                Intent intent = new Intent("com.google.zxing.client.android.SCAN");
                intent.putExtra("SCAN_MODE", "QR_CODE_MODE");
                startActivityForResult(intent, SCAN_QR_CODE_REQUEST_CODE);
                return false;
            } else if (item.getItemId() == R.id.action_send) {
                try {
                    log(pairs);
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
            return false;
        });
        return true;
    }

    private void writeDataToFile() {
        try {
            JSONObject jsonObject = new JSONObject();
            JSONArray wordsArray = new JSONArray();
            for (Word word : words) {
                JSONObject x = new JSONObject();
                x.put("word", word.getWord());
                x.put("bitmapString", bitMapToString(word.getBitmap()));
                x.put("id", word.getId());
                wordsArray.put(x);
            }
            jsonObject.put("results", wordsArray);

            FileOutputStream fOut = openFileOutput(filename, Context.MODE_PRIVATE);
            fOut.write(jsonObject.toString().getBytes());
            fOut.close();

            Toast.makeText(getBaseContext(), "file saved", Toast.LENGTH_SHORT).show();
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    private void updateRec() {
        RecyclerView rv = (RecyclerView) findViewById(R.id.recyclerView);
        WordsAdapter adapter = new WordsAdapter(words);
        rv.setAdapter(adapter);
        GridLayoutManager gridLayoutManager = new GridLayoutManager(this /* the activity */, 2);
        rv.setLayoutManager(gridLayoutManager);
        rv.addOnItemTouchListener(new RecyclerItemClickListener(rv.getContext(), rv, new RecyclerItemClickListener.OnItemClickListener() {

            @Override
            public void onItemClick(View view, int position) {
                // Need this or we don't have info for that after scanning
                lastClickedTileId = words.get(position).getId();

                launchScanner(qrLauncherToUpdate);
            }

            @Override
            public void onLongItemClick(View view, int position) {
                // do whatever
            }
        }));
    }

    private void log(List<Pair> pairs) throws JSONException {
        JSONArray sol = new JSONArray();
        for (Pair pair : pairs) {
            JSONArray ar = new JSONArray();
            ar.put(pair.getFirstWord().getWord());
            ar.put(pair.getSecondWord().getWord());
            sol.put(ar);
        }
        Intent intent = new Intent("ch.apprun.intent.LOG");
// format depends on app, see logbook format guideline
        JSONObject log = new JSONObject();
        log.put("task", "Memory");
        log.put("solution", sol);
        intent.putExtra("ch.apprun.logmessage", log.toString());
        startActivity(intent);
    }

    public static Bitmap getBitmapFromURL(String src) {
        try {
            URL url = new URL(src);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setDoInput(true);
            connection.connect();
            InputStream input = connection.getInputStream();

            return BitmapFactory.decodeStream(input);
        } catch (IOException e) {
            // Log exception
            return null;
        }

    }

    private String readFileInputStream(FileInputStream fis) throws IOException {
        StringBuilder tempBuilder = new StringBuilder();
        try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(fis, StandardCharsets.UTF_8))) {
            String line;
            while ((line = bufferedReader.readLine()) != null) {
                tempBuilder.append(line);
                tempBuilder.append("\n");
            }
        }
        fis.close();
        return tempBuilder.toString();
    }

    public String bitMapToString(Bitmap bitmap) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        bitmap.compress(Bitmap.CompressFormat.PNG, 100, baos);
        byte[] b = baos.toByteArray();

        return Base64.encodeToString(b, Base64.DEFAULT);
    }

    public Bitmap StringToBitMap(String encodedString) {
        try {
            byte[] encodeByte = Base64.decode(encodedString, Base64.DEFAULT);

            return BitmapFactory.decodeByteArray(encodeByte, 0, encodeByte.length);
        } catch (Exception e) {
            e.getMessage();
            return null;
        }
    }
}
